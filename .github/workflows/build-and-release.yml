name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libgtk-3-dev libxss1 libasound2-dev
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Build distributables (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          
      - name: Build distributables (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run dist:win
        
      - name: Build distributables (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist:linux
        
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            release/*.dmg
            release/*.zip
            release/*.blockmap
            release/*.yml
            
      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            release/*.exe
            release/*.blockmap
            release/*.yml
            
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            release/*.AppImage
            release/*.deb
            release/*.rpm
            release/*.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Display structure of downloaded files
        run: ls -la artifacts/
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: WoW Backup Manager ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## 🎉 WoW Backup Manager ${{ github.ref_name }}
            
            ### 📦 Downloads
            
            #### Windows
            - **WoW Backup Manager Setup.exe** - Standard installer
            - **WoW Backup Manager.exe** - Portable version
            
            #### macOS
            - **WoW Backup Manager.dmg** - Intel Macs (x64)
            - **WoW Backup Manager-arm64.dmg** - Apple Silicon Macs (M1/M2)
            
            #### Linux
            - **WoW Backup Manager.AppImage** - Universal Linux
            - **wow-backup-manager.deb** - Debian/Ubuntu package
            
            ### 📋 Installation Instructions
            
            1. Download the appropriate file for your operating system
            2. Run the installer or extract the portable version
            3. Configure your WoW installation path
            4. Start backing up your addons and settings!
            
            ### 🔧 What's New
            - See commit history for detailed changes
            
            ### 🐛 Issues & Support
            If you encounter any issues, please report them on the [Issues page](https://github.com/bradthedev/WowSettingBackup/issues).
            
      - name: Upload Release Assets
        run: |
          # Create a consolidated directory with all builds
          mkdir -p release-assets
          
          # Copy macOS builds
          if [ -d "artifacts/macos-builds" ]; then
            cp artifacts/macos-builds/*.dmg release-assets/ 2>/dev/null || true
            cp artifacts/macos-builds/*.zip release-assets/ 2>/dev/null || true
          fi
          
          # Copy Windows builds  
          if [ -d "artifacts/windows-builds" ]; then
            cp artifacts/windows-builds/*.exe release-assets/ 2>/dev/null || true
          fi
          
          # Copy Linux builds
          if [ -d "artifacts/linux-builds" ]; then
            cp artifacts/linux-builds/*.AppImage release-assets/ 2>/dev/null || true
            cp artifacts/linux-builds/*.deb release-assets/ 2>/dev/null || true
          fi
          
          # Upload each asset
          for asset in release-assets/*; do
            if [ -f "$asset" ]; then
              echo "Uploading $asset"
              gh release upload ${{ github.ref_name }} "$asset"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-updater:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Update auto-updater files
        run: |
          # Copy latest.yml files for auto-updater
          if [ -d "artifacts/windows-builds" ]; then
            cp artifacts/windows-builds/latest.yml . 2>/dev/null || true
          fi
          
          if [ -d "artifacts/macos-builds" ]; then
            cp artifacts/macos-builds/latest-mac.yml . 2>/dev/null || true
          fi
          
          # Upload auto-updater manifests
          if [ -f "latest.yml" ]; then
            gh release upload ${{ github.ref_name }} latest.yml --clobber
          fi
          
          if [ -f "latest-mac.yml" ]; then
            gh release upload ${{ github.ref_name }} latest-mac.yml --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}